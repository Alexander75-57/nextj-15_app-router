–í–æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Next.js 15 (App Router) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Drizzle ORM –∏ MySQL, —Ä–∞–∑–±–∏—Ç—ã–π –ø–æ —Ñ–∞–π–ª–∞–º. –û–Ω —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É.

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
/app
  /contact
    page.tsx
/database
  db.ts
  schema.ts
drizzle.config.ts
.env.local
üß¨ /database/schema.ts
ts
import { mysqlTable, varchar, text, serial } from "drizzle-orm/mysql-core";

export const feedback = mysqlTable("feedback", {
  id: serial("id").primaryKey(),
  email: varchar("email", { length: 255 }).notNull(),
  message: text("message").notNull(),
});
üß¨ /database/db.ts
ts
import { drizzle } from "drizzle-orm/mysql2";
import mysql from "mysql2/promise";
import * as schema from "./schema";

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
});

export const db = drizzle(pool, { schema });
üß† drizzle.config.ts
ts
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  schema: "./database/schema.ts",
  out: "./migrations",
  driver: "mysql2",
  dbCredentials: {
    host: process.env.DB_HOST!,
    user: process.env.DB_USER!,
    password: process.env.DB_PASS!,
    database: process.env.DB_NAME!,
  },
});
üîê .env.local
DB_HOST=localhost
DB_USER=root
DB_PASS=admin
DB_NAME=testdb
üìÑ /app/contact/page.tsx
tsx
"use client";
import { useActionState } from "react";

async function handleSubmit(prev: any, formData: FormData) {
  "use server";
  const { db } = await import("@/database/db");
  const { feedback } = await import("@/database/schema");

  const email = formData.get("email")?.toString() || "";
  const message = formData.get("message")?.toString() || "";

  if (!email.includes("@") || !message) {
    return { error: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è" };
  }

  await db.insert(feedback).values({ email, message });
  return { success: true };
}

export default function ContactPage() {
  const [state, formAction] = useActionState(handleSubmit, { success: false, error: "" });

  return (
    <form action={formAction}>
      <input name="email" placeholder="Email" />
      <textarea name="message" placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ" />
      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      {state.error && <p>{state.error}</p>}
      {state.success && <p>–°–ø–∞—Å–∏–±–æ!</p>}
    </form>
  );
}
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏—è–º–∏, Zod-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–µ—Ä—Å–∏—é —Å react-hook-form. –ò–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª drizzle-kit –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ SQL?

–¥–æ–ø–æ–ª–Ω–∏—Ç—å Zod-–≤–∞–ª–∏–¥–∞—Ü–∏—é
–í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º—ã –≤ Next.js 15 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Zod –¥–ª—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ useActionState:

üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Zod
–ï—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:

bash
npm install zod
üß¨ /database/schema.ts (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
ts
import { mysqlTable, varchar, text, serial } from "drizzle-orm/mysql-core";

export const feedback = mysqlTable("feedback", {
  id: serial("id").primaryKey(),
  email: varchar("email", { length: 255 }).notNull(),
  message: text("message").notNull(),
});
üß† /app/contact/page.tsx —Å Zod-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
tsx
"use client";
import { useActionState } from "react";
import { z } from "zod";

const FeedbackSchema = z.object({
  email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  message: z.string().min(1, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
});

async function handleSubmit(prev: any, formData: FormData) {
  "use server";
  const { db } = await import("@/database/db");
  const { feedback } = await import("@/database/schema");

  const raw = {
    email: formData.get("email")?.toString() || "",
    message: formData.get("message")?.toString() || "",
  };

  const result = FeedbackSchema.safeParse(raw);

  if (!result.success) {
    const errors = result.error.flatten().fieldErrors;
    return { success: false, errors };
  }

  await db.insert(feedback).values(result.data);
  return { success: true, errors: {} };
}

export default function ContactPage() {
  const [state, formAction] = useActionState(handleSubmit, {
    success: false,
    errors: {},
  });

  return (
    <form action={formAction}>
      <input name="email" placeholder="Email" />
      {state.errors?.email && <p>{state.errors.email}</p>}

      <textarea name="message" placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ" />
      {state.errors?.message && <p>{state.errors.message}</p>}

      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      {state.success && <p>–°–ø–∞—Å–∏–±–æ!</p>}
    </form>
  );
}
üß† –ß—Ç–æ –¥–µ–ª–∞–µ—Ç Zod:
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç email –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ flatten().fieldErrors, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–±–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.

–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É, –∫–∞–∫ –≤—ã–Ω–µ—Å—Ç–∏ —Å—Ö–µ–º—É –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ —Ç–æ–∂–µ?

=========================================================

–í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ Zod-—Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –≤ Next.js 15 —Å App Router:

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
/app
  /contact
    page.tsx
    action.ts
/lib
  validation.ts
/database
  db.ts
  schema.ts
üß¨ /lib/validation.ts ‚Äî —Å—Ö–µ–º–∞ –∏ —Ç–∏–ø—ã
ts
import { z } from "zod";

export const FeedbackSchema = z.object({
  email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  message: z.string().min(1, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
});

export type FeedbackInput = z.infer<typeof FeedbackSchema>;
üß† /app/contact/action.ts ‚Äî —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞
ts
"use server";
import { db } from "@/database/db";
import { feedback } from "@/database/schema";
import { FeedbackSchema } from "@/lib/validation";

export async function submitFeedback(_: any, formData: FormData) {
  const raw = {
    email: formData.get("email")?.toString() || "",
    message: formData.get("message")?.toString() || "",
  };

  const result = FeedbackSchema.safeParse(raw);

  if (!result.success) {
    return { success: false, errors: result.error.flatten().fieldErrors };
  }

  await db.insert(feedback).values(result.data);
  return { success: true, errors: {} };
}
üìÑ /app/contact/page.tsx ‚Äî –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
tsx
"use client";
import { useActionState } from "react";
import { FeedbackSchema } from "@/lib/validation";
import { submitFeedback } from "./action";

export default function ContactPage() {
  const [state, formAction] = useActionState(submitFeedback, {
    success: false,
    errors: {},
  });

  const handleClientValidation = (e: React.FormEvent<HTMLFormElement>) => {
    const formData = new FormData(e.currentTarget);
    const raw = {
      email: formData.get("email")?.toString() || "",
      message: formData.get("message")?.toString() || "",
    };

    const result = FeedbackSchema.safeParse(raw);
    if (!result.success) {
      e.preventDefault(); // –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }
  };

  return (
    <form action={formAction} onSubmit={handleClientValidation} noValidate>
      <input name="email" placeholder="Email" />
      {state.errors?.email && <p>{state.errors.email}</p>}

      <textarea name="message" placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ" />
      {state.errors?.message && <p>{state.errors.message}</p>}

      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      {state.success && <p>–°–ø–∞—Å–∏–±–æ!</p>}
    </form>
  );
}
üîç –ß—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏:
–í—ã–Ω–µ—Å–ª–∏ —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ /lib/validation.ts, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤–µ–∑–¥–µ.

–ù–∞ –∫–ª–∏–µ–Ω—Ç–µ: –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –ª–∏—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã.

–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.