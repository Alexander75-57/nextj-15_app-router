"use client";

import { useActionState, useState, useRef } from "react";
import Link from "next/link"
import { Button } from "@/components/ui/button"

import { FeedbackSchema } from "@/lib/validation";
//import { submitFeedback } from "./action"; // change to tRPCProvider
import { trpcClient } from "@/app/api/client";

export default function ContactPage() {
  const submitFeedback = trpcClient.addFeedback.useMutation();

  type FormState = { success: boolean; errors: Record<string, string[]> };
  
 // Используем tRPC с useActionState для управления состоянием формы и обработки ошибок
  const [state, formAction, isPending] = useActionState(async (prev: FormState, formData: FormData) => {
    const raw = {
        email: formData.get("email")?.toString() || "",
        message: formData.get("message")?.toString() || "",
    };
    try {
        const result = await submitFeedback.mutateAsync(raw);
        if (result.success) {
            return { ...prev, success: true, errors: {} };
        } else {
            return { ...prev, success: false, errors: result.errors };
        }
    }   catch (error) {
        console.error('Error submitting feedback:', error);
        return { ...prev, success: false, errors: { general: ['Unable to connect to database. Please try again later.'] } };
    }
      
  }, { success: false, errors: {} } as FormState)
  
  const [clientErrors, setClientErrors] = useState<Record<string, string[]>>({});

  const getFieldError = (field: string) => {
    return clientErrors[field]?.[0] || state?.errors?.[field]?.[0];
  };
  const formRef = useRef<HTMLFormElement>(null);

  const handleClientValidation = (e: React.FormEvent<HTMLFormElement>) => {
    const formData = new FormData(e.currentTarget);
    const raw = {
      email: formData.get("email")?.toString() || "",
      message: formData.get("message")?.toString() || "",
    };

    const result = FeedbackSchema.safeParse(raw);
    if (!result.success) {
      e.preventDefault();
      setClientErrors(result.error.flatten().fieldErrors);
    } else {
      setClientErrors({});
    }
  };

  // Сброс формы после успешной отправки
  if (state.success && formRef.current) {
    formRef.current.reset();
  }

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center">Feedback</h1>
      
      <form ref={formRef} action={formAction} onSubmit={handleClientValidation} noValidate className="space-y-4">
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
            Email
          </label>
          <input 
            id="email"
            name="email" 
            type="email"
            placeholder="example@email.com" 
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-black"
            disabled={isPending}
          />
          {getFieldError('email') && (
            <p className="text-red-500 text-sm mt-1">{getFieldError('email')}</p>
          )}
        </div>

        <div>
          <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
            Message
          </label>
          <textarea 
            id="message"
            name="message" 
            placeholder="Your message..." 
            rows={4}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical text-black"
            disabled={isPending}
          />
          {getFieldError('message') && (
            <p className="text-red-500 text-sm mt-1">{getFieldError('message')}</p>
          )}
        </div>

        <button 
          type="submit" 
          disabled={isPending}
          className="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isPending ? 'Sending...' : 'Send Message'}
        </button>
        
        {state.success && (
          <div className="p-3 bg-green-100 border border-green-400 text-green-700 rounded-md">
            Thank you! Your message has been sent.
          </div>
        )}
        
        {state?.errors?.general?.[0] && (
          <div className="p-3 bg-red-100 border border-red-400 text-red-700 rounded-md">
            {state?.errors?.general?.[0]}
          </div>
        )}

        <div className="flex justify-center">
          <Link 
            href="/" 
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-green-500 text-white gap-2 hover:bg-green-600 font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
          >
            Back to main page
          </Link>
        </div>
      </form>
    </div>
  );
}